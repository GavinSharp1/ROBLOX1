local stock_triangle = Instance.new("WedgePart")
stock_triangle.Anchored = true
stock_triangle.BottomSurface = "Smooth"
stock_triangle.FormFactor = "Custom"
stock_triangle.Locked = true
stock_triangle.TopSurface = "Smooth"
local stock_triangle_mesh = Instance.new("SpecialMesh", stock_triangle)
stock_triangle_mesh.MeshType = "Wedge"
local triangles = {}
function PyramidCharacter.CreateTriangle(v1, v2, v3, properties, parent, index)
	local triangleInfo = triangles[index]
	local side1 = (v1 - v2).magnitude
	local side2 = (v2 - v3).magnitude
	local side3 = (v3 - v1).magnitude
	local sqrside1 = side1 * side1
	local sqrside2 = side2 * side2
	local sqrside3 = side3 * side3
	if sqrside3 + sqrside1 == sqrside2 then
		v1, v2, v3 = v1, v2, v3
	elseif sqrside1 + sqrside2 == sqrside3 then
		v1, v2, v3 = v2, v3, v1
	elseif sqrside2 + sqrside3 == sqrside1 then
		v1, v2, v3 = v3, v1, v2
	elseif sqrside1 >= sqrside2 and sqrside1 >= sqrside3 then
		v1, v2, v3 = v1, v2, v3
	elseif sqrside2 >= sqrside3 and sqrside2 >= sqrside1 then
		v1, v2, v3 = v2, v3, v1
	else
		v1, v2, v3 = v3, v1, v2
	end
	local model, part1, part2, mesh1, mesh2
	if triangleInfo then
		model, part1, part2, mesh1, mesh2 = unpack(triangleInfo)
		if not (model.Parent == parent and part1.Parent == model and part2.Parent == model and mesh1.Parent == part1 and mesh2.Parent == part2) then
			if model.Parent then
				model:Destroy()
			end			
			model = nil
		end
	else
		triangleInfo = {}
		triangles[index] = triangleInfo
	end
	if not model then
		model = Instance.new("Model")
		part1 = stock_triangle:Clone()
		part2 = stock_triangle:Clone()
		mesh1 = part1.Mesh
		mesh2 = part2.Mesh
		part1.Parent = model
		part2.Parent = model
		triangleInfo[1] = model
		triangleInfo[2] = part1
		triangleInfo[3] = part2
		triangleInfo[4] = mesh1
		triangleInfo[5] = mesh2
	end
	for key, value in pairs(properties) do
		part1[key] = value
		part2[key] = value
	end
	local cframe = CFrame.new(v1, v2)
	local relpos = cframe:pointToObjectSpace(v3)
	cframe = cframe * CFrame.fromEulerAnglesXYZ(0, 0, -math.atan2(relpos.x, relpos.y))
	local rel1 = cframe:pointToObjectSpace(v1)
	local rel2 = cframe:pointToObjectSpace(v2)
	local rel3 = cframe:pointToObjectSpace(v3)
	local height = rel3.y
	local width1 = rel3.z
	local width2 = rel2.z - rel3.z
	local relcenter1 = Vector3.new(0, height / 2, width1 / 2)
	local center1 = cframe:pointToWorldSpace(relcenter1)
	local relcenter2 = Vector3.new(0, height / 2, width2 / 2 + width1)
	local center2 = cframe:pointToWorldSpace(relcenter2)
	height = math.abs(height)
	width1 = math.abs(width1)
	width2 = math.abs(width2)
	if not part1.Anchored then
		part1.Anchored = true
	end
	part1.Size = Vector3.new(0.2, height, width1)
	part1.CFrame = cframe * CFrame.fromEulerAnglesXYZ(0, math.pi, 0) - cframe.p + center1	
	mesh1.Scale = Vector3.new(0, height / part1.Size.y, width1 / part1.Size.z)
	if not part2.Anchored then
		part2.Anchored = true
	end
	part2.Size = Vector3.new(0.2, height, width1)
	part2.CFrame = cframe - cframe.p + center2
	mesh2.Scale = Vector3.new(0, height / part1.Size.y, width2 / part2.Size.z)
	model.Parent = parent
	return model
end
local stock_core = Instance.new("Part")
stock_core.Anchored = true
stock_core.BottomSurface = "Smooth"
stock_core.Color = Color3.new(1, 1, 1)
stock_core.FormFactor = "Custom"
stock_core.Locked = true
stock_core.Name = "CubePyramid"
stock_core.Size = Vector3.new(0.5, 0.5, 0.5)
stock_core.TopSurface = "Smooth"
